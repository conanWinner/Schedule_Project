import random
from deap import base, creator, tools, algorithms

from service.constraints_service import non_conflict_periods
from constant.constant_variable import user_preferences, PREFERENCE_FUNCTIONS, USER_INPUT, COURSES

NUM_COURSES = len(USER_INPUT)
COURSE_OPTIONS = [len(COURSES[course]) for course in USER_INPUT]  # S·ªë l·ªõp m·ªói m√¥n

# Thi·∫øt l·∫≠p NSGA-II
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)


def init_individual():
    # [(subject_id, (teacher, day, periods, area, room))]
    return creator.Individual([random.randint(0, options - 1) for options in COURSE_OPTIONS])




# V√¨ thu·∫≠t to√°n NSGA-II t·ªëi ∆∞u theo h∆∞·ªõng gi√° tr·ªã nh·ªè h∆°n l√† t·ªët h∆°n, n√™n:
#   - L·ªãch kh√¥ng c√≥ xung ƒë·ªôt (conflicts = 0) ƒë∆∞·ª£c ∆∞u ti√™n.
#   - L·ªãch c√≥ kho·∫£ng tr·ªëng nh·ªè (gaps nh·ªè) t·ªët h∆°n. (Optional)
#   - L·ªãch h·ªçc th·ªèa m√£n s·ªü th√≠ch ng∆∞·ªùi d√πng (priority_score c√†ng √¢m c√†ng t·ªët) ƒë∆∞·ª£c ∆∞u ti√™n h∆°n.
def evaluate(individual, user_preferences):
    selected_classes = [(USER_INPUT[i], COURSES[USER_INPUT[i]][idx]) for i, idx in enumerate(individual)]

    conflict = non_conflict_periods(selected_classes)

    priority_score = 0
    for key, preference in user_preferences.items():
        if key in PREFERENCE_FUNCTIONS:
            priority_score += PREFERENCE_FUNCTIONS[key](selected_classes, preference)

    priority_score += conflict
    return (priority_score, )


toolbox = base.Toolbox()
toolbox.register("individual", init_individual)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("evaluate", lambda ind: evaluate(ind, user_preferences))
toolbox.register("mate", tools.cxTwoPoint)
toolbox.register("mutate", tools.mutUniformInt, low=0, up=[o - 1 for o in COURSE_OPTIONS], indpb=0.2)
toolbox.register("select", tools.selNSGA2)


def main():
    random.seed(42)
    pop = toolbox.population(n=30)
    algorithms.eaMuPlusLambda(pop, toolbox, mu=100, lambda_=100, cxpb=0.7, mutpb=0.2, ngen=50, verbose=False)

    pareto_front = tools.sortNondominated(pop, len(pop), first_front_only=True)[0]
    print(pareto_front)
    print("\nüîπ C√°c l·ªãch tr√¨nh t·ªëi ∆∞u:")

    for ind in pareto_front:
        schedule = [(USER_INPUT[i], COURSES[USER_INPUT[i]][idx]) for i, idx in enumerate(ind)]
        print(f"üìå L·ªãch: {schedule}")
        print(f"‚ùå S·ªë ƒëi·ªÉm ∆∞u ti√™n: {ind.fitness.values[0]}")
        # print(f"üïê Kho·∫£ng tr·ªëng: {ind.fitness.values[1]}")
        # print(f"üö´ Gi√°o vi√™n b·ªã c·∫•m: {ind.fitness.values[2]}")
        # print(f"üè† Ph√≤ng b·ªã c·∫•m: {ind.fitness.values[3]}")
        # print(f"üìÖ Ng√†y b·ªã c·∫•m: {ind.fitness.values[4]}\n")




if __name__ == "__main__":
    main()
