import pandas as pd
import time
import json
import google.generativeai as genai

# 1. C·∫•u h√¨nh API key
genai.configure(api_key="AIzaSyA8G0cHkXQwOQ8V07B_k4452u5WLJYkVWs")

# 2. Kh·ªüi t·∫°o model Gemini 1.5 Flash
model = genai.GenerativeModel("gemini-1.5-flash")

# 3. ƒê·ªçc file Excel (ch·ªânh ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn)
df = pd.read_excel("./input/Final_Override_Dataset_VIT5.xlsx").head(10)

# 4. M·∫´u JSON schema c·∫ßn sinh
json_schema_with_comment = """{

  "defaults": {
    "subject_per_session": number,             // S·ªë m√¥n t·ªëi ƒëa trong m·ªôt bu·ªïi
    "subject_per_day": number,                 // S·ªë m√¥n t·ªëi ƒëa trong m·ªôt ng√†y
    "duration_of_session": {                   
      "value": number,                         // S·ªë ti·∫øt h·ªçc c·ªßa m√¥n h·ªçc (v√≠ d·ª•: 2)
      "up_or_down": "up" | "down",             // Gi·ªõi h·∫°n t·ªëi ƒëa ho·∫∑c t·ªëi thi·ªÉu s·ªë ti·∫øt h·ªçc
      "like": boolean
    },
    "period_onward": {
      "value": number,                         // Ti·∫øt h·ªçc b·∫Øt ƒë·∫ßu ∆∞u ti√™n (v√≠ d·ª•: 3)
      "like": boolean
    },
    "hour_onward": {
      "value": number,                         // Gi·ªù b·∫Øt ƒë·∫ßu ∆∞u ti√™n (v√≠ d·ª•: 9)
      "unit": "hour",
      "like": boolean
    },
    "area": {
      "value": string,                         // Khu v·ª±c h·ªçc mong mu·ªën (v√≠ d·ª•: "K")
      "like": boolean
    },
    "room": [                                  // Danh s√°ch ph√≤ng h·ªçc mong mu·ªën ho·∫∑c c·∫ßn tr√°nh
      { "value": string, "like": boolean }
    ],
    "teacher": [                               // Danh s√°ch gi√°o vi√™n mu·ªën h·ªçc ho·∫∑c tr√°nh
      { "name": string, "like": boolean }
    ],
    "class": [                                 // L·ªõp h·ªçc ph·∫ßn k√®m nh√≥m l·ªõp
      {
        "name": string,
        "class_group": [
          { "value": number, "like": boolean }
        ]
      }
    ],
    "rest_interval": {
      "value": number,                         // S·ªë ti·∫øt ngh·ªâ gi·ªØa c√°c m√¥n (v√≠ d·ª•: 1)
      "up_or_down": "up" | "down",             // Gi·ªõi h·∫°n t·ªëi ƒëa ho·∫∑c t·ªëi thi·ªÉu th·ªùi gian ngh·ªâ
      "like": boolean
    }
  },
  "periods": [                                  // C√°c r√†ng bu·ªôc c·ª• th·ªÉ theo t·ª´ng ng√†y
    {
      "day": 
        { "value": string, "like": boolean } // T√™n ng√†y trong tu·∫ßn, v√≠ d·ª•: "Th·ª© 2"
      ,  
      "period": { "value": [number], "like": boolean }, // C√°c ti·∫øt h·ªçc mu·ªën h·ªçc trong ng√†y
      "subject_count": { "value": number, "like": boolean }, // S·ªë m√¥n mu·ªën h·ªçc h√¥m ƒë√≥
      "duration_of_session": {                   
        "value": number,                         
        "up_or_down": "up" | "down",             
        "like": boolean
      },
      "rest_interval": {
        "value": number,
        "up_or_down": "up" | "down",
        "like": boolean
      },
      "teacher": [ { "name": string, "like": boolean } ],
      "room": [ { "value": string, "like": boolean } ],
      "area": { "value": string, "like": boolean },
      "class": [
        {
          "name": string,
          "class_group": [
            { "value": number, "like": boolean }
          ]
        }
      ],
      "period_onward": {
        "value": number,
        "like": boolean
      },
      "hour_onward": {
        "value": number,
        "unit": "hour",
        "like": boolean
      }
    }
  ]

}"""

# 5. H√†m chuy·ªÉn c√¢u sang JSON (ƒë√£ c·∫£i ti·∫øn prompt chi ti·∫øt)
def sentence_to_json(sentence):
    retries = 3
    for attempt in range(retries):
        try:
            prompt = f"""
H√£y ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON theo c·∫•u tr√∫c sau (ƒë√£ ƒë∆∞·ª£c ch√∫ th√≠ch r√µ r√†ng):

f"{json_schema_with_comment}\n"

Output: ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin theo m·∫´u v·ªõi c√¢u: {sentence}
G·ª£i √Ω th√™m:  
- "like": true nghƒ©a l√† ∆∞u ti√™n, "like": false l√† tr√°nh.
- Bu·ªïi s√°ng: ti·∫øt 1 ƒë·∫øn ti·∫øt 5, Bu·ªïi chi·ªÅu:  ti·∫øt 6 ƒë·∫øn ti·∫øt 9, C·∫£ ng√†y: ti·∫øt 1 ƒë·∫øn ti·∫øt 9
- S√°ng: Ti·∫øt 1: 07h30, Ti·∫øt 2: 08h30, Ti·∫øt 3: 09h30, Ti·∫øt 4: 10h30, Ti·∫øt 5: 11h30, Chi·ªÅu: Ti·∫øt 6: 13h00, Ti·∫øt 7: 14h00, Ti·∫øt 8: 15h00, Ti·∫øt 9: 16h00, Ti·∫øt 10: 17h00"
- T√°ch area v√† room nh∆∞ n√†y: V.A201 th√¨ tr∆∞·ªõc d·∫•u ch·∫•m l√† area, to√†n b·ªô sau d·∫•u ch·∫•m l√† room

L∆∞u √Ω:
- N·∫øu kh√¥ng c√≥ y√™u c·∫ßu c·ª• th·ªÉ th√¨ kh√¥ng c·∫ßn ƒë∆∞a v√†o `periods`, ch·ªâ ƒë∆∞a v√†o `defaults`.
- N·∫øu nh·ªØng y√™u c·∫ßu ƒë∆∞a v√†o `periods`, th√¨ kh√¥ng c·∫ßn ƒë∆∞a v√†o `defaults` n·ªØa
- N·∫øu kh√¥ng c√≥ th√¥ng tin n√†o v·ªÅ  field l√† m·∫£ng ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p t·ª´ ng∆∞·ªùi d√πng th√¨ h√£y ƒë·ªÉ m·∫£ng r·ªóng
- N·∫øu kh√¥ng c√≥ th√¥ng tin n√†o v·ªÅ  field l√† object ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p t·ª´ ng∆∞·ªùi d√πng th√¨ h√£y ƒë·ªÉ object ƒë√≥ l√† null
            """

            response = model.generate_content(
                contents=[
                    {"role": "user", "parts": [{"text": prompt}]}
                ],
                generation_config={"temperature": 0.5}
            )

            json_str = response.text.strip()

            if json_str.startswith("```json"):
                json_str = json_str[len("```json"):].strip()
            if json_str.endswith("```"):
                json_str = json_str[:-len("```")].strip()

            return json.loads(json_str)

        except Exception as e:
            if "429" in str(e) or "RESOURCE_EXHAUSTED" in str(e):
                delay = 2 ** attempt
                print(f"[!] Qu√° t·∫£i API - th·ª≠ l·∫°i sau {delay} gi√¢y...")
                time.sleep(delay)
            else:
                print(f"[!] L·ªói kh√¥ng mong mu·ªën: {e}")
                return None
    return None


# 6. X·ª≠ l√Ω t·ª´ng d√≤ng
results = []
for i, row in df.iterrows():
    sentence = str(row[0])  # gi·∫£ s·ª≠ c√¢u n·∫±m ·ªü c·ªôt ƒë·∫ßu ti√™n
    print(f"üîπ ƒêang x·ª≠ l√Ω d√≤ng {i + 1}: {sentence}")
    json_output = sentence_to_json(sentence)
    if json_output:
        results.append(json_output)
    time.sleep(1)  # Tr√°nh v∆∞·ª£t gi·ªõi h·∫°n g·ªçi API

# 7. Ghi k·∫øt qu·∫£ ra file
with open("./output/converted_data.json", "w", encoding="utf-8") as f:
    json.dump(results, f, ensure_ascii=False, indent=2)

print("‚úÖ ƒê√£ ho√†n th√†nh chuy·ªÉn ƒë·ªïi v√† l∆∞u v√†o file 'converted_data.json'.")
